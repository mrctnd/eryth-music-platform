// <auto-generated />
using System;
using System.Collections.Generic;
using Eryth.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Eryth.API.Data.Migrations
{
    [DbContext(typeof(ErythDbContext))]
    partial class ErythDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Eryth.API.Models.Album", b =>
                {
                    b.Property<long>("AlbumId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("album_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AlbumId"));

                    b.Property<int>("AlbumType")
                        .HasColumnType("integer")
                        .HasColumnName("album_type");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("cover_image_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatorUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("creator_user_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long?>("GenreId")
                        .HasColumnType("bigint")
                        .HasColumnName("genre_id");

                    b.Property<string>("PrimaryArtistDisplayText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("primary_artist_display_text");

                    b.Property<string>("RecordLabelName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("record_label_name");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("release_date");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<long>("TotalLikeCount")
                        .HasColumnType("bigint")
                        .HasColumnName("total_like_count");

                    b.Property<long>("TotalPlayCount")
                        .HasColumnType("bigint")
                        .HasColumnName("total_play_count");

                    b.Property<string>("Upc")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("upc");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Visibility")
                        .HasColumnType("integer")
                        .HasColumnName("visibility");

                    b.HasKey("AlbumId")
                        .HasName("pk_albums");

                    b.HasIndex("CreatorUserId")
                        .HasDatabaseName("ix_albums_creator_user_id");

                    b.HasIndex("GenreId")
                        .HasDatabaseName("ix_albums_genre_id");

                    b.ToTable("albums", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.AlbumMusic", b =>
                {
                    b.Property<long>("AlbumMusicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("album_music_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("AlbumMusicId"));

                    b.Property<long>("AlbumId")
                        .HasColumnType("bigint")
                        .HasColumnName("album_id");

                    b.Property<int>("DiscNumber")
                        .HasColumnType("integer")
                        .HasColumnName("disc_number");

                    b.Property<long>("MusicId")
                        .HasColumnType("bigint")
                        .HasColumnName("music_id");

                    b.Property<int>("TrackNumber")
                        .HasColumnType("integer")
                        .HasColumnName("track_number");

                    b.HasKey("AlbumMusicId")
                        .HasName("pk_album_musics");

                    b.HasIndex("MusicId")
                        .HasDatabaseName("ix_album_musics_music_id");

                    b.HasIndex("AlbumId", "MusicId")
                        .IsUnique()
                        .HasDatabaseName("ix_album_musics_album_id_music_id");

                    b.HasIndex("AlbumId", "DiscNumber", "TrackNumber")
                        .IsUnique()
                        .HasDatabaseName("ix_album_musics_album_id_disc_number_track_number");

                    b.ToTable("album_musics", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.Chat", b =>
                {
                    b.Property<Guid>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("chat_id");

                    b.Property<int>("ChatType")
                        .HasColumnType("integer")
                        .HasColumnName("chat_type");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("LastMessageAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_message_at");

                    b.Property<long?>("LastMessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("last_message_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("ChatId")
                        .HasName("pk_chats");

                    b.HasIndex("LastMessageId")
                        .HasDatabaseName("ix_chats_last_message_id");

                    b.ToTable("chats", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.ChatParticipant", b =>
                {
                    b.Property<long>("ChatParticipantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("chat_participant_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ChatParticipantId"));

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid")
                        .HasColumnName("chat_id");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("joined_at");

                    b.Property<long?>("LastReadMessageId")
                        .HasColumnType("bigint")
                        .HasColumnName("last_read_message_id");

                    b.Property<bool>("NotificationsEnabled")
                        .HasColumnType("boolean")
                        .HasColumnName("notifications_enabled");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("ChatParticipantId")
                        .HasName("pk_chat_participants");

                    b.HasIndex("LastReadMessageId")
                        .HasDatabaseName("ix_chat_participants_last_read_message_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_chat_participants_user_id");

                    b.HasIndex("ChatId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_chat_participants_chat_id_user_id");

                    b.ToTable("chat_participants", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.Comment", b =>
                {
                    b.Property<long>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("comment_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("CommentId"));

                    b.Property<long?>("AlbumId")
                        .HasColumnType("bigint")
                        .HasColumnName("album_id");

                    b.Property<DateTime>("CommentedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("commented_at");

                    b.Property<long>("CommentedEntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("commented_entity_id");

                    b.Property<int>("CommentedEntityType")
                        .HasColumnType("integer")
                        .HasColumnName("commented_entity_type");

                    b.Property<long>("LikeCount")
                        .HasColumnType("bigint")
                        .HasColumnName("like_count");

                    b.Property<long?>("MusicId")
                        .HasColumnType("bigint")
                        .HasColumnName("music_id");

                    b.Property<long?>("ParentCommentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_comment_id");

                    b.Property<long?>("PlaylistId")
                        .HasColumnType("bigint")
                        .HasColumnName("playlist_id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("CommentId")
                        .HasName("pk_comments");

                    b.HasIndex("AlbumId")
                        .HasDatabaseName("ix_comments_album_id");

                    b.HasIndex("MusicId")
                        .HasDatabaseName("ix_comments_music_id");

                    b.HasIndex("ParentCommentId")
                        .HasDatabaseName("ix_comments_parent_comment_id");

                    b.HasIndex("PlaylistId")
                        .HasDatabaseName("ix_comments_playlist_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_comments_user_id");

                    b.ToTable("comments", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.Follow", b =>
                {
                    b.Property<long>("FollowId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("follow_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("FollowId"));

                    b.Property<DateTime>("FollowedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("followed_at");

                    b.Property<long>("FollowerUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("follower_user_id");

                    b.Property<long>("FollowingUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("following_user_id");

                    b.HasKey("FollowId")
                        .HasName("pk_follows");

                    b.HasIndex("FollowingUserId")
                        .HasDatabaseName("ix_follows_following_user_id");

                    b.HasIndex("FollowerUserId", "FollowingUserId")
                        .IsUnique()
                        .HasDatabaseName("ix_follows_follower_user_id_following_user_id");

                    b.ToTable("follows", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.Genre", b =>
                {
                    b.Property<long>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("genre_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("GenreId"));

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("cover_image_url");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<long?>("ParentGenreId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_genre_id");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("slug");

                    b.HasKey("GenreId")
                        .HasName("pk_genres");

                    b.HasIndex("ParentGenreId")
                        .HasDatabaseName("ix_genres_parent_genre_id");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ix_genres_slug");

                    b.ToTable("genres", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.Like", b =>
                {
                    b.Property<long>("LikeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("like_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("LikeId"));

                    b.Property<long?>("AlbumId")
                        .HasColumnType("bigint")
                        .HasColumnName("album_id");

                    b.Property<long?>("CommentId")
                        .HasColumnType("bigint")
                        .HasColumnName("comment_id");

                    b.Property<DateTime>("LikedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("liked_at");

                    b.Property<long>("LikedEntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("liked_entity_id");

                    b.Property<int>("LikedEntityType")
                        .HasColumnType("integer")
                        .HasColumnName("liked_entity_type");

                    b.Property<long?>("MusicId")
                        .HasColumnType("bigint")
                        .HasColumnName("music_id");

                    b.Property<long?>("PlaylistId")
                        .HasColumnType("bigint")
                        .HasColumnName("playlist_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("LikeId")
                        .HasName("pk_likes");

                    b.HasIndex("AlbumId")
                        .HasDatabaseName("ix_likes_album_id");

                    b.HasIndex("CommentId")
                        .HasDatabaseName("ix_likes_comment_id");

                    b.HasIndex("MusicId")
                        .HasDatabaseName("ix_likes_music_id");

                    b.HasIndex("PlaylistId")
                        .HasDatabaseName("ix_likes_playlist_id");

                    b.HasIndex("UserId", "LikedEntityType", "LikedEntityId")
                        .IsUnique()
                        .HasDatabaseName("ix_likes_user_id_liked_entity_type_liked_entity_id");

                    b.ToTable("likes", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.Message", b =>
                {
                    b.Property<long>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("message_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MessageId"));

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid")
                        .HasColumnName("chat_id");

                    b.Property<string>("ContentText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content_text");

                    b.Property<bool>("DeletedForEveryone")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted_for_everyone");

                    b.Property<bool>("DeletedForSender")
                        .HasColumnType("boolean")
                        .HasColumnName("deleted_for_sender");

                    b.Property<int>("MessageType")
                        .HasColumnType("integer")
                        .HasColumnName("message_type");

                    b.Property<long>("SenderUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("sender_user_id");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("sent_at");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.HasKey("MessageId")
                        .HasName("pk_messages");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("ix_messages_chat_id");

                    b.HasIndex("SenderUserId")
                        .HasDatabaseName("ix_messages_sender_user_id");

                    b.ToTable("messages", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.Mood", b =>
                {
                    b.Property<long>("MoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("mood_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MoodId"));

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("cover_image_url");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("slug");

                    b.HasKey("MoodId")
                        .HasName("pk_moods");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ix_moods_slug");

                    b.ToTable("moods", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.Music", b =>
                {
                    b.Property<long>("MusicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("music_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MusicId"));

                    b.Property<int?>("AudioBitrateKbitps")
                        .HasColumnType("integer")
                        .HasColumnName("audio_bitrate_kbitps");

                    b.Property<string>("AudioFileFormat")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("audio_file_format");

                    b.Property<string>("AudioFilePath")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("audio_file_path");

                    b.Property<decimal?>("AudioFileSizeMb")
                        .HasColumnType("numeric")
                        .HasColumnName("audio_file_size_mb");

                    b.Property<int?>("Bpm")
                        .HasColumnType("integer")
                        .HasColumnName("bpm");

                    b.Property<long>("CommentCount")
                        .HasColumnType("bigint")
                        .HasColumnName("comment_count");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("cover_image_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<int>("DurationSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("duration_seconds");

                    b.Property<List<string>>("FeaturedArtistsDisplayText")
                        .HasColumnType("text[]")
                        .HasColumnName("featured_artists_display_text");

                    b.Property<long?>("GenreId")
                        .HasColumnType("bigint")
                        .HasColumnName("genre_id");

                    b.Property<bool>("IsDownloadable")
                        .HasColumnType("boolean")
                        .HasColumnName("is_downloadable");

                    b.Property<string>("Isrc")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("isrc");

                    b.Property<string>("KeySignature")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)")
                        .HasColumnName("key_signature");

                    b.Property<long>("LikeCount")
                        .HasColumnType("bigint")
                        .HasColumnName("like_count");

                    b.Property<string>("Lyrics")
                        .HasColumnType("text")
                        .HasColumnName("lyrics");

                    b.Property<long>("PlayCount")
                        .HasColumnType("bigint")
                        .HasColumnName("play_count");

                    b.Property<string>("PrimaryArtistDisplayText")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("primary_artist_display_text");

                    b.Property<DateTime?>("ReleaseDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("release_date");

                    b.Property<long>("RepostCount")
                        .HasColumnType("bigint")
                        .HasColumnName("repost_count");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<long?>("SubGenreId")
                        .HasColumnType("bigint")
                        .HasColumnName("sub_genre_id");

                    b.Property<List<string>>("Tags")
                        .HasColumnType("text[]")
                        .HasColumnName("tags");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("title");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("upload_date");

                    b.Property<long>("UploaderUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("uploader_user_id");

                    b.Property<int>("Visibility")
                        .HasColumnType("integer")
                        .HasColumnName("visibility");

                    b.Property<string>("WaveformDataPath")
                        .HasColumnType("text")
                        .HasColumnName("waveform_data_path");

                    b.HasKey("MusicId")
                        .HasName("pk_musics");

                    b.HasIndex("GenreId")
                        .HasDatabaseName("ix_musics_genre_id");

                    b.HasIndex("SubGenreId")
                        .HasDatabaseName("ix_musics_sub_genre_id");

                    b.HasIndex("UploaderUserId")
                        .HasDatabaseName("ix_musics_uploader_user_id");

                    b.ToTable("musics", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.MusicMood", b =>
                {
                    b.Property<long>("MusicMoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("music_mood_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MusicMoodId"));

                    b.Property<long>("MoodId")
                        .HasColumnType("bigint")
                        .HasColumnName("mood_id");

                    b.Property<long>("MusicId")
                        .HasColumnType("bigint")
                        .HasColumnName("music_id");

                    b.HasKey("MusicMoodId")
                        .HasName("pk_music_moods");

                    b.HasIndex("MoodId")
                        .HasDatabaseName("ix_music_moods_mood_id");

                    b.HasIndex("MusicId", "MoodId")
                        .IsUnique()
                        .HasDatabaseName("ix_music_moods_music_id_mood_id");

                    b.ToTable("music_moods", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.MusicUserDefinedTag", b =>
                {
                    b.Property<long>("MusicTagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("music_tag_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("MusicTagId"));

                    b.Property<long>("MusicId")
                        .HasColumnType("bigint")
                        .HasColumnName("music_id");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    b.HasKey("MusicTagId")
                        .HasName("pk_music_user_defined_tags");

                    b.HasIndex("TagId")
                        .HasDatabaseName("ix_music_user_defined_tags_tag_id");

                    b.HasIndex("MusicId", "TagId")
                        .IsUnique()
                        .HasDatabaseName("ix_music_user_defined_tags_music_id_tag_id");

                    b.ToTable("music_user_defined_tags", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.Notification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("notification_id");

                    b.Property<long?>("ActorUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("actor_user_id");

                    b.Property<string>("ContentText")
                        .HasColumnType("text")
                        .HasColumnName("content_text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("is_read");

                    b.Property<string>("LinkUrl")
                        .HasColumnType("text")
                        .HasColumnName("link_url");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer")
                        .HasColumnName("notification_type");

                    b.Property<long?>("PrimaryEntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("primary_entity_id");

                    b.Property<int?>("PrimaryEntityType")
                        .HasColumnType("integer")
                        .HasColumnName("primary_entity_type");

                    b.Property<DateTime?>("ReadAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("read_at");

                    b.Property<long>("ReceiverUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("receiver_user_id");

                    b.HasKey("NotificationId")
                        .HasName("pk_notifications");

                    b.HasIndex("ActorUserId")
                        .HasDatabaseName("ix_notifications_actor_user_id");

                    b.HasIndex("ReceiverUserId")
                        .HasDatabaseName("ix_notifications_receiver_user_id");

                    b.ToTable("notifications", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.Playlist", b =>
                {
                    b.Property<long>("PlaylistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("playlist_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PlaylistId"));

                    b.Property<bool>("CanSubscribersAddTracks")
                        .HasColumnType("boolean")
                        .HasColumnName("can_subscribers_add_tracks");

                    b.Property<string>("CoverImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("cover_image_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<long>("CreatorUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("creator_user_id");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<long>("FollowerCount")
                        .HasColumnType("bigint")
                        .HasColumnName("follower_count");

                    b.Property<long>("LikeCount")
                        .HasColumnType("bigint")
                        .HasColumnName("like_count");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)")
                        .HasColumnName("title");

                    b.Property<int>("TotalDurationSeconds")
                        .HasColumnType("integer")
                        .HasColumnName("total_duration_seconds");

                    b.Property<int>("TrackCount")
                        .HasColumnType("integer")
                        .HasColumnName("track_count");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<int>("Visibility")
                        .HasColumnType("integer")
                        .HasColumnName("visibility");

                    b.HasKey("PlaylistId")
                        .HasName("pk_playlists");

                    b.HasIndex("CreatorUserId")
                        .HasDatabaseName("ix_playlists_creator_user_id");

                    b.ToTable("playlists", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.PlaylistCollaborator", b =>
                {
                    b.Property<long>("PlaylistCollaboratorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("playlist_collaborator_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PlaylistCollaboratorId"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_at");

                    b.Property<long>("PlaylistId")
                        .HasColumnType("bigint")
                        .HasColumnName("playlist_id");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("PlaylistCollaboratorId")
                        .HasName("pk_playlist_collaborators");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_playlist_collaborators_user_id");

                    b.HasIndex("PlaylistId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_playlist_collaborators_playlist_id_user_id");

                    b.ToTable("playlist_collaborators", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.PlaylistMusic", b =>
                {
                    b.Property<long>("PlaylistMusicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("playlist_music_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("PlaylistMusicId"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("added_at");

                    b.Property<long>("AddedByUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("added_by_user_id");

                    b.Property<int?>("CustomOrder")
                        .HasColumnType("integer")
                        .HasColumnName("custom_order");

                    b.Property<long>("MusicId")
                        .HasColumnType("bigint")
                        .HasColumnName("music_id");

                    b.Property<long>("PlaylistId")
                        .HasColumnType("bigint")
                        .HasColumnName("playlist_id");

                    b.HasKey("PlaylistMusicId")
                        .HasName("pk_playlist_musics");

                    b.HasIndex("AddedByUserId")
                        .HasDatabaseName("ix_playlist_musics_added_by_user_id");

                    b.HasIndex("MusicId")
                        .HasDatabaseName("ix_playlist_musics_music_id");

                    b.HasIndex("PlaylistId", "MusicId")
                        .IsUnique()
                        .HasDatabaseName("ix_playlist_musics_playlist_id_music_id");

                    b.ToTable("playlist_musics", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.Save", b =>
                {
                    b.Property<long>("SaveId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("save_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SaveId"));

                    b.Property<long?>("AlbumId")
                        .HasColumnType("bigint")
                        .HasColumnName("album_id");

                    b.Property<long?>("PlaylistId")
                        .HasColumnType("bigint")
                        .HasColumnName("playlist_id");

                    b.Property<DateTime>("SavedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("saved_at");

                    b.Property<long>("SavedEntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("saved_entity_id");

                    b.Property<int>("SavedEntityType")
                        .HasColumnType("integer")
                        .HasColumnName("saved_entity_type");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("SaveId")
                        .HasName("pk_saves");

                    b.HasIndex("AlbumId")
                        .HasDatabaseName("ix_saves_album_id");

                    b.HasIndex("PlaylistId")
                        .HasDatabaseName("ix_saves_playlist_id");

                    b.HasIndex("UserId", "SavedEntityType", "SavedEntityId")
                        .IsUnique()
                        .HasDatabaseName("ix_saves_user_id_saved_entity_type_saved_entity_id");

                    b.ToTable("saves", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.User", b =>
                {
                    b.Property<long>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserId"));

                    b.Property<string>("Bio")
                        .HasColumnType("text")
                        .HasColumnName("bio");

                    b.Property<string>("CoverPhotoUrl")
                        .HasColumnType("text")
                        .HasColumnName("cover_photo_url");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("display_name");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("email");

                    b.Property<string>("EmailVerificationToken")
                        .HasColumnType("text")
                        .HasColumnName("email_verification_token");

                    b.Property<bool>("EmailVerified")
                        .HasColumnType("boolean")
                        .HasColumnName("email_verified");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_login_date");

                    b.Property<string>("Location")
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<DateTime?>("PasswordResetExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("password_reset_expires_at");

                    b.Property<string>("PasswordResetToken")
                        .HasColumnType("text")
                        .HasColumnName("password_reset_token");

                    b.Property<string>("PrivacySettings")
                        .HasColumnType("jsonb")
                        .HasColumnName("privacy_settings");

                    b.Property<string>("ProfilePictureUrl")
                        .HasColumnType("text")
                        .HasColumnName("profile_picture_url");

                    b.Property<int>("Role")
                        .HasColumnType("integer")
                        .HasColumnName("role");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("username");

                    b.Property<string>("WebsiteUrl")
                        .HasColumnType("text")
                        .HasColumnName("website_url");

                    b.HasKey("UserId")
                        .HasName("pk_users");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_users_email");

                    b.HasIndex("Username")
                        .IsUnique()
                        .HasDatabaseName("ix_users_username");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.UserActivityLog", b =>
                {
                    b.Property<long>("ActivityLogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("activity_log_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("ActivityLogId"));

                    b.Property<int>("ActivityType")
                        .HasColumnType("integer")
                        .HasColumnName("activity_type");

                    b.Property<string>("Details")
                        .HasColumnType("jsonb")
                        .HasColumnName("details");

                    b.Property<long?>("PrimaryEntityId")
                        .HasColumnType("bigint")
                        .HasColumnName("primary_entity_id");

                    b.Property<int?>("PrimaryEntityType")
                        .HasColumnType("integer")
                        .HasColumnName("primary_entity_type");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("timestamp");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("ActivityLogId")
                        .HasName("pk_user_activity_logs");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_activity_logs_user_id");

                    b.ToTable("user_activity_logs", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.UserAuthenticationProvider", b =>
                {
                    b.Property<long>("UserAuthProviderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("user_auth_provider_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("UserAuthProviderId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("ProviderName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("provider_name");

                    b.Property<string>("ProviderUserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("provider_user_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("UserAuthProviderId")
                        .HasName("pk_user_authentication_providers");

                    b.HasIndex("ProviderName", "ProviderUserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_authentication_providers_provider_name_provider_user_id");

                    b.HasIndex("UserId", "ProviderName")
                        .IsUnique()
                        .HasDatabaseName("ix_user_authentication_providers_user_id_provider_name");

                    b.ToTable("user_authentication_providers", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.UserDefinedTag", b =>
                {
                    b.Property<long>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("tag_id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("TagId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("slug");

                    b.Property<long>("UsageCount")
                        .HasColumnType("bigint")
                        .HasColumnName("usage_count");

                    b.HasKey("TagId")
                        .HasName("pk_user_defined_tags");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("ix_user_defined_tags_slug");

                    b.ToTable("user_defined_tags", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.UserSession", b =>
                {
                    b.Property<Guid>("SessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("session_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expires_at");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)")
                        .HasColumnName("ip_address");

                    b.Property<DateTime>("LastAccessedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("last_accessed_at");

                    b.Property<string>("RefreshTokenHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("refresh_token_hash");

                    b.Property<string>("UserAgent")
                        .HasColumnType("text")
                        .HasColumnName("user_agent");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("SessionId")
                        .HasName("pk_user_sessions");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_sessions_user_id");

                    b.ToTable("user_sessions", (string)null);
                });

            modelBuilder.Entity("Eryth.API.Models.Album", b =>
                {
                    b.HasOne("Eryth.API.Models.User", "CreatorUser")
                        .WithMany("CreatedAlbums")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_albums_users_creator_user_id");

                    b.HasOne("Eryth.API.Models.Genre", "Genre")
                        .WithMany("Albums")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_albums_genres_genre_id");

                    b.Navigation("CreatorUser");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("Eryth.API.Models.AlbumMusic", b =>
                {
                    b.HasOne("Eryth.API.Models.Album", "Album")
                        .WithMany("AlbumMusics")
                        .HasForeignKey("AlbumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_album_musics_albums_album_id");

                    b.HasOne("Eryth.API.Models.Music", "Music")
                        .WithMany("AlbumMusics")
                        .HasForeignKey("MusicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_album_musics_musics_music_id");

                    b.Navigation("Album");

                    b.Navigation("Music");
                });

            modelBuilder.Entity("Eryth.API.Models.Chat", b =>
                {
                    b.HasOne("Eryth.API.Models.Message", "LastMessage")
                        .WithMany()
                        .HasForeignKey("LastMessageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_chats_messages_last_message_id");

                    b.Navigation("LastMessage");
                });

            modelBuilder.Entity("Eryth.API.Models.ChatParticipant", b =>
                {
                    b.HasOne("Eryth.API.Models.Chat", "Chat")
                        .WithMany("Participants")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chat_participants_chats_chat_id");

                    b.HasOne("Eryth.API.Models.Message", "LastReadMessage")
                        .WithMany()
                        .HasForeignKey("LastReadMessageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_chat_participants_messages_last_read_message_id");

                    b.HasOne("Eryth.API.Models.User", "User")
                        .WithMany("ChatParticipations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_chat_participants_users_user_id");

                    b.Navigation("Chat");

                    b.Navigation("LastReadMessage");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eryth.API.Models.Comment", b =>
                {
                    b.HasOne("Eryth.API.Models.Album", null)
                        .WithMany("Comments")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("fk_comments_albums_album_id");

                    b.HasOne("Eryth.API.Models.Music", null)
                        .WithMany("Comments")
                        .HasForeignKey("MusicId")
                        .HasConstraintName("fk_comments_musics_music_id");

                    b.HasOne("Eryth.API.Models.Comment", "ParentComment")
                        .WithMany("Replies")
                        .HasForeignKey("ParentCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_comments_comments_parent_comment_id");

                    b.HasOne("Eryth.API.Models.Playlist", null)
                        .WithMany("Comments")
                        .HasForeignKey("PlaylistId")
                        .HasConstraintName("fk_comments_playlists_playlist_id");

                    b.HasOne("Eryth.API.Models.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_comments_users_user_id");

                    b.Navigation("ParentComment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eryth.API.Models.Follow", b =>
                {
                    b.HasOne("Eryth.API.Models.User", "FollowerUser")
                        .WithMany("Following")
                        .HasForeignKey("FollowerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_follows_users_follower_user_id");

                    b.HasOne("Eryth.API.Models.User", "FollowingUser")
                        .WithMany("Followers")
                        .HasForeignKey("FollowingUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_follows_users_following_user_id");

                    b.Navigation("FollowerUser");

                    b.Navigation("FollowingUser");
                });

            modelBuilder.Entity("Eryth.API.Models.Genre", b =>
                {
                    b.HasOne("Eryth.API.Models.Genre", "ParentGenre")
                        .WithMany("SubGenres")
                        .HasForeignKey("ParentGenreId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_genres_genres_parent_genre_id");

                    b.Navigation("ParentGenre");
                });

            modelBuilder.Entity("Eryth.API.Models.Like", b =>
                {
                    b.HasOne("Eryth.API.Models.Album", null)
                        .WithMany("Likes")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("fk_likes_albums_album_id");

                    b.HasOne("Eryth.API.Models.Comment", null)
                        .WithMany("Likes")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("fk_likes_comments_comment_id");

                    b.HasOne("Eryth.API.Models.Music", null)
                        .WithMany("Likes")
                        .HasForeignKey("MusicId")
                        .HasConstraintName("fk_likes_musics_music_id");

                    b.HasOne("Eryth.API.Models.Playlist", null)
                        .WithMany("Likes")
                        .HasForeignKey("PlaylistId")
                        .HasConstraintName("fk_likes_playlists_playlist_id");

                    b.HasOne("Eryth.API.Models.User", "User")
                        .WithMany("Likes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_likes_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eryth.API.Models.Message", b =>
                {
                    b.HasOne("Eryth.API.Models.Chat", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_chats_chat_id");

                    b.HasOne("Eryth.API.Models.User", "SenderUser")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_messages_users_sender_user_id");

                    b.Navigation("Chat");

                    b.Navigation("SenderUser");
                });

            modelBuilder.Entity("Eryth.API.Models.Music", b =>
                {
                    b.HasOne("Eryth.API.Models.Genre", "Genre")
                        .WithMany("Musics")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_musics_genres_genre_id");

                    b.HasOne("Eryth.API.Models.Genre", "SubGenre")
                        .WithMany("SubGenreMusics")
                        .HasForeignKey("SubGenreId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_musics_genres_sub_genre_id");

                    b.HasOne("Eryth.API.Models.User", "UploaderUser")
                        .WithMany("UploadedMusics")
                        .HasForeignKey("UploaderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_musics_users_uploader_user_id");

                    b.Navigation("Genre");

                    b.Navigation("SubGenre");

                    b.Navigation("UploaderUser");
                });

            modelBuilder.Entity("Eryth.API.Models.MusicMood", b =>
                {
                    b.HasOne("Eryth.API.Models.Mood", "Mood")
                        .WithMany("MusicMoods")
                        .HasForeignKey("MoodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_music_moods_moods_mood_id");

                    b.HasOne("Eryth.API.Models.Music", "Music")
                        .WithMany("MusicMoods")
                        .HasForeignKey("MusicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_music_moods_musics_music_id");

                    b.Navigation("Mood");

                    b.Navigation("Music");
                });

            modelBuilder.Entity("Eryth.API.Models.MusicUserDefinedTag", b =>
                {
                    b.HasOne("Eryth.API.Models.Music", "Music")
                        .WithMany("MusicUserDefinedTags")
                        .HasForeignKey("MusicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_music_user_defined_tags_musics_music_id");

                    b.HasOne("Eryth.API.Models.UserDefinedTag", "UserDefinedTag")
                        .WithMany("MusicUserDefinedTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_music_user_defined_tags_user_defined_tags_tag_id");

                    b.Navigation("Music");

                    b.Navigation("UserDefinedTag");
                });

            modelBuilder.Entity("Eryth.API.Models.Notification", b =>
                {
                    b.HasOne("Eryth.API.Models.User", "ActorUser")
                        .WithMany("TriggeredNotifications")
                        .HasForeignKey("ActorUserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_notifications_users_actor_user_id");

                    b.HasOne("Eryth.API.Models.User", "ReceiverUser")
                        .WithMany("ReceivedNotifications")
                        .HasForeignKey("ReceiverUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_notifications_users_receiver_user_id");

                    b.Navigation("ActorUser");

                    b.Navigation("ReceiverUser");
                });

            modelBuilder.Entity("Eryth.API.Models.Playlist", b =>
                {
                    b.HasOne("Eryth.API.Models.User", "CreatorUser")
                        .WithMany("CreatedPlaylists")
                        .HasForeignKey("CreatorUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_playlists_users_creator_user_id");

                    b.Navigation("CreatorUser");
                });

            modelBuilder.Entity("Eryth.API.Models.PlaylistCollaborator", b =>
                {
                    b.HasOne("Eryth.API.Models.Playlist", "Playlist")
                        .WithMany("Collaborators")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_playlist_collaborators_playlists_playlist_id");

                    b.HasOne("Eryth.API.Models.User", "User")
                        .WithMany("PlaylistCollaborations")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_playlist_collaborators_users_user_id");

                    b.Navigation("Playlist");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eryth.API.Models.PlaylistMusic", b =>
                {
                    b.HasOne("Eryth.API.Models.User", "AddedByUser")
                        .WithMany("AddedPlaylistMusics")
                        .HasForeignKey("AddedByUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_playlist_musics_users_added_by_user_id");

                    b.HasOne("Eryth.API.Models.Music", "Music")
                        .WithMany("PlaylistMusics")
                        .HasForeignKey("MusicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_playlist_musics_musics_music_id");

                    b.HasOne("Eryth.API.Models.Playlist", "Playlist")
                        .WithMany("PlaylistMusics")
                        .HasForeignKey("PlaylistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_playlist_musics_playlists_playlist_id");

                    b.Navigation("AddedByUser");

                    b.Navigation("Music");

                    b.Navigation("Playlist");
                });

            modelBuilder.Entity("Eryth.API.Models.Save", b =>
                {
                    b.HasOne("Eryth.API.Models.Album", null)
                        .WithMany("Saves")
                        .HasForeignKey("AlbumId")
                        .HasConstraintName("fk_saves_albums_album_id");

                    b.HasOne("Eryth.API.Models.Playlist", null)
                        .WithMany("Saves")
                        .HasForeignKey("PlaylistId")
                        .HasConstraintName("fk_saves_playlists_playlist_id");

                    b.HasOne("Eryth.API.Models.User", "User")
                        .WithMany("Saves")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_saves_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eryth.API.Models.UserActivityLog", b =>
                {
                    b.HasOne("Eryth.API.Models.User", "User")
                        .WithMany("ActivityLogs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_user_activity_logs_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eryth.API.Models.UserAuthenticationProvider", b =>
                {
                    b.HasOne("Eryth.API.Models.User", "User")
                        .WithMany("AuthProviders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_authentication_providers_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eryth.API.Models.UserSession", b =>
                {
                    b.HasOne("Eryth.API.Models.User", "User")
                        .WithMany("Sessions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_sessions_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Eryth.API.Models.Album", b =>
                {
                    b.Navigation("AlbumMusics");

                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Saves");
                });

            modelBuilder.Entity("Eryth.API.Models.Chat", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Participants");
                });

            modelBuilder.Entity("Eryth.API.Models.Comment", b =>
                {
                    b.Navigation("Likes");

                    b.Navigation("Replies");
                });

            modelBuilder.Entity("Eryth.API.Models.Genre", b =>
                {
                    b.Navigation("Albums");

                    b.Navigation("Musics");

                    b.Navigation("SubGenreMusics");

                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("Eryth.API.Models.Mood", b =>
                {
                    b.Navigation("MusicMoods");
                });

            modelBuilder.Entity("Eryth.API.Models.Music", b =>
                {
                    b.Navigation("AlbumMusics");

                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("MusicMoods");

                    b.Navigation("MusicUserDefinedTags");

                    b.Navigation("PlaylistMusics");
                });

            modelBuilder.Entity("Eryth.API.Models.Playlist", b =>
                {
                    b.Navigation("Collaborators");

                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("PlaylistMusics");

                    b.Navigation("Saves");
                });

            modelBuilder.Entity("Eryth.API.Models.User", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("AddedPlaylistMusics");

                    b.Navigation("AuthProviders");

                    b.Navigation("ChatParticipations");

                    b.Navigation("Comments");

                    b.Navigation("CreatedAlbums");

                    b.Navigation("CreatedPlaylists");

                    b.Navigation("Followers");

                    b.Navigation("Following");

                    b.Navigation("Likes");

                    b.Navigation("PlaylistCollaborations");

                    b.Navigation("ReceivedNotifications");

                    b.Navigation("Saves");

                    b.Navigation("SentMessages");

                    b.Navigation("Sessions");

                    b.Navigation("TriggeredNotifications");

                    b.Navigation("UploadedMusics");
                });

            modelBuilder.Entity("Eryth.API.Models.UserDefinedTag", b =>
                {
                    b.Navigation("MusicUserDefinedTags");
                });
#pragma warning restore 612, 618
        }
    }
}
